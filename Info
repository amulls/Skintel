# üéØ Skin Cancer Detection AI Project (Visual Studio Code Setup)

# üìÅ Project Structure (inside VS Code):

# skin-cancer-ai/
# ‚îú‚îÄ‚îÄ data/                      # Dermoscopic image dataset
# ‚îÇ   ‚îî‚îÄ‚îÄ HAM10000/             # Kaggle dataset directory
# ‚îú‚îÄ‚îÄ models/                    # Saved PyTorch models
# ‚îú‚îÄ‚îÄ app/                       # FastAPI app for deployment
# ‚îÇ   ‚îî‚îÄ‚îÄ main.py                # API entrypoint
# ‚îú‚îÄ‚îÄ train.py                   # Training script
# ‚îú‚îÄ‚îÄ evaluate.py                # Evaluation script
# ‚îú‚îÄ‚îÄ requirements.txt           # Dependencies
# ‚îî‚îÄ‚îÄ README.md                  # Project description

# ========================================
# üì¶ requirements.txt
# ========================================
torch
torchvision
fastapi
uvicorn
pillow
matplotlib
scikit-learn

# ========================================
# üß† train.py (main training logic)
# ========================================
import os
import torch
import torch.nn as nn
import torchvision.transforms as transforms
from torch.utils.data import DataLoader
from torchvision.datasets import ImageFolder
from torchvision.models import resnet18

# Parameters
DATA_DIR = './data/HAM10000'  # Replace with actual path
BATCH_SIZE = 64
EPOCHS = 10
LR = 1e-4

# Transformations
transform = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.5, 0.5, 0.5], std=[0.5, 0.5, 0.5])
])

# Dataset
dataset = ImageFolder(DATA_DIR, transform=transform)
dataloader = DataLoader(dataset, batch_size=BATCH_SIZE, shuffle=True)

# Model
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model = resnet18(pretrained=True)
model.fc = nn.Linear(model.fc.in_features, len(dataset.classes))
model = model.to(device)

# Training setup
criterion = nn.CrossEntropyLoss()
optimizer = torch.optim.Adam(model.parameters(), lr=LR)

for epoch in range(EPOCHS):
    model.train()
    total_loss = 0
    for images, labels in dataloader:
        images, labels = images.to(device), labels.to(device)
        optimizer.zero_grad()
        outputs = model(images)
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()
        total_loss += loss.item()
    print(f"Epoch {epoch+1}/{EPOCHS}, Loss: {total_loss/len(dataloader):.4f}")

# Save model
os.makedirs('models', exist_ok=True)
torch.save(model.state_dict(), 'models/skin_cancer_model.pth')

# ========================================
# üìä evaluate.py
# ========================================
import torch
from torchvision.datasets import ImageFolder
from torch.utils.data import DataLoader
from torchvision import transforms
from torchvision.models import resnet18
from sklearn.metrics import classification_report

# Load test data
transform = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.5, 0.5, 0.5], std=[0.5, 0.5, 0.5])
])

test_data = ImageFolder('./data/HAM10000/test', transform=transform)
test_loader = DataLoader(test_data, batch_size=64, shuffle=False)

# Load model
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model = resnet18()
model.fc = nn.Linear(model.fc.in_features, len(test_data.classes))
model.load_state_dict(torch.load('models/skin_cancer_model.pth', map_location=device))
model.to(device)
model.eval()

all_preds = []
all_labels = []

with torch.no_grad():
    for images, labels in test_loader:
        images = images.to(device)
        outputs = model(images)
        _, preds = torch.max(outputs, 1)
        all_preds.extend(preds.cpu().numpy())
        all_labels.extend(labels.numpy())

print(classification_report(all_labels, all_preds, target_names=test_data.classes))

# ========================================
# üöÄ app/main.py (FastAPI app)
# ========================================
from fastapi import FastAPI, UploadFile, File
from torchvision import transforms
from PIL import Image
import torch
import io
from torchvision.models import resnet18
import torch.nn as nn
import os

app = FastAPI()

# Load model
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model = resnet18()
model.fc = nn.Linear(model.fc.in_features, 7)  # Assuming 7 skin cancer classes
model.load_state_dict(torch.load("models/skin_cancer_model.pth", map_location=device))
model.to(device)
model.eval()

# Transform
transform = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.5, 0.5, 0.5], std=[0.5, 0.5, 0.5])
])

labels = ['akiec', 'bcc', 'bkl', 'df', 'mel', 'nv', 'vasc']  # HAM10000 class names

@app.post("/predict")
async def predict(file: UploadFile = File(...)):
    image = Image.open(io.BytesIO(await file.read())).convert("RGB")
    image = transform(image).unsqueeze(0).to(device)
    outputs = model(image)
    _, pred = torch.max(outputs, 1)
    label = labels[pred.item()]
    return {"prediction": label}

# ========================================
# üí° To Run Locally:
# ========================================
# 1. Install dependencies: pip install -r requirements.txt
# 2. Train model: python train.py
# 3. Evaluate model: python evaluate.py
# 4. Run API: uvicorn app.main:app --reload

# ========================================
# üìÑ README.md (Include this in root)
# ========================================
# Skin Cancer Detection AI

This project uses deep learning to classify dermoscopic images into skin cancer types using the HAM10000 dataset.

## Steps
- Train model using `train.py`
- Evaluate accuracy with `evaluate.py`
- Serve predictions via FastAPI in `app/main.py`

## Dataset
- Source: https://www.kaggle.com/kmader/skin-cancer-mnist-ham10000
